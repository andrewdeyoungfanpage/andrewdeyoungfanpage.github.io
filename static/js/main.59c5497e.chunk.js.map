{"version":3,"sources":["components/Video.js","components/photosData.js","components/Photos.js","components/App.js","serviceWorker.js","index.js"],"names":["handleTap","event","videoElem","target","paused","play","pause","Video","props","videoUrl","id","thumbUrl","className","onClick","src","playsInline","poster","photosData","size","Photos","folder","state","path","cur","joke","photoClick","bind","this","setState","imgSrc","alt","Component","App","entryPoints","i","length","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0MAEA,SAASA,EAAUC,GACf,IAAMC,EAAYD,EAAME,OACpBD,EAAUE,OACVF,EAAUG,OAEVH,EAAUI,QAkBHC,MAff,SAAeC,GACX,IAAMC,EAAoC,kBAAoBD,EAAME,GAAK,OACnEC,EAAoC,kBAAoBH,EAAME,GAAK,OACzE,OACI,yBAAKE,UAAU,kBAAkBC,QAASb,GACtC,2BACIc,IAAKL,EACLM,aAAa,EACbC,OAAQL,EACRC,UAAU,YCoBXK,EAvCI,CACf,CACIP,GAAI,OACJQ,KAAM,GAEV,CACIR,GAAI,UACJQ,KAAM,IAEV,CACIR,GAAI,QACJQ,KAAM,IAEV,CACIR,GAAI,MACJQ,KAAM,GAEV,CACIR,GAAI,QACJQ,KAAM,GAEV,CACIR,GAAI,SACJQ,KAAM,GAEV,CACIR,GAAI,UACJQ,KAAM,GAEV,CACIR,GAAI,SACJQ,KAAM,IAEV,CACIR,GAAI,QACJQ,KAAM,I,mCCkBCC,E,kDAlDX,WAAYX,GAAQ,IAAD,EAGf,GAHe,oBACf,eAEqB,SAAjBA,EAAMY,OAAmB,CAEzB,EAAKC,MAAQ,CACTC,KAFkC,kBAGlCC,IAAK,EACLC,KAAM,CACF,SACA,OACA,YAGL,CACH,IAAMF,EACF,4DAA8Dd,EAAMY,OAAOV,GAAK,IACpF,EAAKW,MAAQ,CACTC,KAAMA,EACNC,IAAK,EACLL,KAAMV,EAAMY,OAAOF,MApBZ,OAwBf,EAAKO,WAAa,EAAKA,WAAWC,KAAhB,gBAxBH,E,yDA4BfC,KAAKC,SAAS,CAAEL,IAAKI,KAAKN,MAAME,IAAM,M,+BAItC,IAAIM,EAAS,GAMb,OALIF,KAAKN,MAAMG,KACXK,GAAUF,KAAKN,MAAMC,KAAOK,KAAKN,MAAMG,KAAKG,KAAKN,MAAME,IAAM,GAAK,OAElEM,GAAWF,KAAKN,MAAMC,KAAOK,KAAKN,MAAME,IAAMI,KAAKN,MAAMH,KAAO,OAGhE,yBAAKN,UAAU,kBAAkBC,QAASc,KAAKF,YAC3C,yBACIX,IAAKe,EACLC,IAAI,OACJlB,UAAU,e,GA5CTmB,aCyCNC,MArCf,WAKE,IAJA,IAGMC,EAAc,GACXC,EAAI,EAAGA,EAAIjB,EAAWkB,OAAQD,GAAK,EAC1CD,EAAYG,KACV,4BACE,4BAAI,kBAAC,EAAD,CAAQhB,OAAQH,EAAWiB,MAC/B,4BAAKA,EAAI,EAAIjB,EAAWkB,QAAU,kBAAC,EAAD,CAAQf,OAAQH,EAAWiB,EAAI,QAavE,OACE,yBAAKtB,UAAU,OACb,yBAAKE,IAtB+B,gCAsBlBF,UAAU,WAAWkB,IAAI,SAC3C,+BACE,4BACE,4BAAI,kBAAC,EAAD,CAAOpB,GAAG,OACd,4BAAI,kBAAC,EAAD,CAAOA,GAAG,QAEfuB,EACD,kBAAC,EAAD,CAAQb,OAAO,YCzBHiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.59c5497e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction handleTap(event) {\r\n    const videoElem = event.target;\r\n    if (videoElem.paused)\r\n        videoElem.play();\r\n    else\r\n        videoElem.pause();\r\n}\r\n\r\nfunction Video(props) {\r\n    const videoUrl = process.env.PUBLIC_URL + '/assets/videos/' + props.id + '.mov';\r\n    const thumbUrl = process.env.PUBLIC_URL + '/assets/videos/' + props.id + '.png';\r\n    return (\r\n        <div className=\"video-container\" onClick={handleTap}>\r\n            <video\r\n                src={videoUrl}\r\n                playsInline={true}\r\n                poster={thumbUrl}\r\n                className=\"video\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Video;\r\n","const photosData = [\r\n    {\r\n        id: \"back\",\r\n        size: 4,\r\n    },\r\n    {\r\n        id: \"closeup\",\r\n        size: 33,\r\n    },\r\n    {\r\n        id: \"front\",\r\n        size: 12,\r\n    },\r\n    {\r\n        id: \"not\",\r\n        size: 2,\r\n    },\r\n    {\r\n        id: \"peace\",\r\n        size: 2,\r\n    },\r\n    {\r\n        id: \"selfie\",\r\n        size: 5,\r\n    },\r\n    {\r\n        id: \"smoking\",\r\n        size: 7,\r\n    },\r\n    {\r\n        id: \"stance\",\r\n        size: 14,\r\n    },\r\n    {\r\n        id: \"teeth\",\r\n        size: 7,\r\n    },\r\n]\r\n\r\nexport default photosData;","import React, { Component } from \"react\";\r\n\r\nclass Photos extends Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        if (props.folder === \"joke\") {\r\n            const path = process.env.PUBLIC_URL + '/assets/photos/';\r\n            this.state = {\r\n                path: path,\r\n                cur: 0,\r\n                joke: [\r\n                    \"window\",\r\n                    \"tree\",\r\n                    \"dog\"\r\n                ]\r\n            }\r\n        } else {\r\n            const path =\r\n                \"https://jacobspictures.s3-us-west-1.amazonaws.com/andrew/\" + props.folder.id + \"/\";\r\n            this.state = {\r\n                path: path,\r\n                cur: 0,\r\n                size: props.folder.size,\r\n            }\r\n        }\r\n\r\n        this.photoClick = this.photoClick.bind(this);\r\n    }\r\n\r\n    photoClick() {\r\n        this.setState({ cur: this.state.cur + 1 });\r\n    }\r\n\r\n    render() {\r\n        let imgSrc = \"\";\r\n        if (this.state.joke) {\r\n            imgSrc += this.state.path + this.state.joke[this.state.cur % 3] + \".png\";\r\n        } else {\r\n            imgSrc +=  this.state.path + this.state.cur % this.state.size + \".jpg\";\r\n        }\r\n        return (\r\n            <div className=\"photo-container\" onClick={this.photoClick}>\r\n                <img\r\n                    src={imgSrc}\r\n                    alt=\"oops\"\r\n                    className=\"photo\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Photos;\r\n","import React from 'react';\nimport '../App.css';\nimport Video from './Video';\nimport photosData from './photosData';\nimport Photos from './Photos';\n\nfunction App() {\n  const background = process.env.PUBLIC_URL + \"/assets/photos/andrew.png\";\n  const header = process.env.PUBLIC_URL + '/assets/photos/andrewText.png';\n\n  const entryPoints = [];\n  for (var i = 0; i < photosData.length; i += 2) {\n    entryPoints.push(\n      <tr>\n        <td><Photos folder={photosData[i]} /></td>\n        <td>{i + 1 < photosData.length && <Photos folder={photosData[i + 1]} />}</td>\n      </tr>\n    );\n  }\n\n  // var sectionStyle = {\n  //   backgroundImage: \"url(\" + background + \")\",\n  //   backgroundPosition: 'center',\n  //   backgroundSize: '100',\n  //   backgroundRepeat: 'no-repeat',\n  //   opacity: 1\n  // };\n\n  return (\n    <div className=\"App\">\n      <img src={header} className=\"App-logo\" alt=\"oops\" />\n      <table>\n        <tr>\n          <td><Video id=\"0\" /></td>\n          <td><Video id=\"1\" /></td>\n        </tr>\n        {entryPoints}\n        <Photos folder=\"joke\" />\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}